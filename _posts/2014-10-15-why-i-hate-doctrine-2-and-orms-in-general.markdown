---
layout: post
status: publish
published: true
title: Why I hate Doctrine 2 and ORMs in general
author:
  display_name: lucian303
  login: admin
  email: lucian303@gmail.com
  url: http://lucianux.com/
author_login: admin
author_email: lucian303@gmail.com
author_url: http://lucianux.com/
wordpress_id: 683
wordpress_url: http://lucianux.com/?p=683
date: '2014-10-15 18:42:26 -0400'
date_gmt: '2014-10-15 22:42:26 -0400'
categories:
- Blog
tags:
- architecture
- optimization
- ORM
- doctrine 2
- doctrine
- database
- db
- hate
- bad software
- bad code
- storage
- design
- query
- slow code
---
<p>I recently started working at a company where the applications, started before I got there, use <a href="http://www.doctrine-project.org/" target="_blank">Doctrine 2</a>. It's an absolute nightmare. This is the worst software I have had the displeasure of using in years and definitely up there with the worst of the worst.</p>
<p>A StackOverflow user, mtbikemike, <a href="http://stackoverflow.com/questions/267629/whats-your-experience-with-doctrine-orm" target="_blank">sums it up perfectly</a>: "It took me days to figure out a solution for something that I knew I could have written in SQL in a matter of minutes." That was also my experience. SAD, a term I coined for Slow Application Development. Not to mention ugly code and limitations around every corner. Things that should take minutes take days and things that would normally be more complicated and take hours or days are just not doable (or not worth the time). The resulting code is much more verbose and cryptic as it uses its own query language (because we really need another query language to make things even less readable and confusing).</p>
<p>But it gets worse. Not only is development time stretched, but strange bugs abound all throughout. Just today, I ran a query that should have returned a constant number of entities. The SQL Doctrine generated was correct, albeit verbose and fugly beyond belief, but despite being a very plain query, it returned back an arbitrary number of entities with no explanation. It's possible to run SQL directly but to get it to return Doctrine Entity objects is an exercise not worth pursuing. Queries of any complexity still have to be written in SQL and dealing with the different names of the Doctrine objects and the database becomes an absolute nightmare. Of course, once your applications are written to use this ever-present ORM database layer, it's very difficult and time consuming to go change. There's no escaping hell.</p>
<p>And it gets even worse. The performance is absolutely atrocious. The overhead is anywhere from 20-40 times the actual query times. In one project, all the queries come to about .5% of the total running time while the overhead is at 10-20%. That's insane! The memory usage is so great that I can easily max out 1GB while processing only a few thousand records. An&nbsp;API I'm working with that is built on top of it maxes out somewhere between 2000-9000 records as far as capacity. Two to nine thousand! To say that that API doesn't scale is an understatement, and profiling once again reveals around 25% to 80% of the time spent on Doctrine overhead. The actual queries run rather quickly in comparison to the overhead, though of course, they could run much quicker if they were optimized and not generated by Doctrine.</p>
<p>I absolutely do feel that Doctrine and <a href="http://seldo.com/weblog/2011/08/11/orm_is_an_antipattern" target="_blank">ORMs in general are anti-patterns</a>. There is no quicker way to mess up an application for good than to employ Doctrine or an ORM. While I'm not opposed to a light database layer, I expect my database layer to perform on the order of millions of records per second, not choke an a few thousand. Many of the concepts in the documentation make absolutely no sense and actually have no SQL equivalents. While some may tout it being vendor independent, if switching database vendors is your concern, there will be a ton of work regardless of how 'vendor independent' your solution will be as anything advanced will still require SQL and vendor specific lock-in is incredibly difficult to avoid while writing performant code.</p>
<p>I can't stress enough how atrocious the performance is. It feels like I'm on a 286. For the API heretofore mentioned, the only real solution I can think of is a ground-up rewrite. It may be possible to implement some caching, but that will only go so far. It's been a disservice to the company who contracted out the work and will require quite some time to rewrite. Unfortunately, a Doctrine developer seems to have worked on the original code / design, so I'm not surprised that the API is such a disaster. I think it goes without saying that if you don't want a steaming pile of shit, you should avoid Doctrine in particular and ORMs in general.</p>
